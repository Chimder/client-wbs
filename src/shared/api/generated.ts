/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * LilDiscord Api
 * websocket chats
 * OpenAPI spec version: 1.0
 */
import { customInstance } from './axios.instance';
export type CreateRandomUserParams = {
/**
 * Name of User
 */
name?: string;
};

export type GetPodchannelParams = {
/**
 * ID of the podchannel
 */
channelId: number;
};

export type CreatePodchannelParams = {
/**
 * Name of the podchannel
 */
name: string;
/**
 * type of the podchannel
 */
types: string;
/**
 * channel of the podchannel
 */
id: number;
};

export type CreateChannelParams = {
/**
 * Name of Channel
 */
name?: string;
};

export type GetChannelParams = {
/**
 * ID of the channel
 */
id: string;
};

export interface ModelsUser {
  /** created_at */
  created_at?: string;
  /** id */
  id?: number;
  /** name */
  name?: string;
  /** updated_at */
  updated_at?: string;
}

export interface ModelsPodchannel {
  /** channel_id */
  channel_id?: number;
  /** created_at */
  created_at?: string;
  /** id */
  id?: number;
  /** name */
  name?: string;
  /** types */
  types?: string;
  /** updated_at */
  updated_at?: string;
}

export interface ModelsChannel {
  /** created_at */
  created_at?: string;
  /** id */
  id?: number;
  /** name */
  name?: string;
  /** updated_at */
  updated_at?: string;
}

export interface HandlerChannelWithPodchannels {
  channel?: ModelsChannel;
  podchannels?: ModelsPodchannel[];
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  /**
 * Get one channel
 * @summary Get one channel
 */
export const getChannel = (
    params: GetChannelParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerChannelWithPodchannels>(
      {url: `/channel`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create Channel
 * @summary Create Channel
 */
export const createChannel = (
    params?: CreateChannelParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModelsChannel>(
      {url: `/channel/create`, method: 'POST',
        params
    },
      options);
    }
  
/**
 * Get channels
 * @summary Get channels
 */
export const getChannels = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModelsChannel[]>(
      {url: `/channels`, method: 'GET'
    },
      options);
    }
  
/**
 * Create one podchannel
 * @summary Create one podchannel
 */
export const createPodchannel = (
    params: CreatePodchannelParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<HandlerChannelWithPodchannels>(
      {url: `/podchannel/create`, method: 'POST',
        params
    },
      options);
    }
  
/**
 * Get podchannel
 * @summary Get podchannel
 */
export const getPodchannel = (
    params: GetPodchannelParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModelsPodchannel[]>(
      {url: `/podchannels`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create random Channel
 * @summary Create random User
 */
export const createRandomUser = (
    params?: CreateRandomUserParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModelsUser>(
      {url: `/user/create`, method: 'POST',
        params
    },
      options);
    }
  
export type GetChannelResult = NonNullable<Awaited<ReturnType<typeof getChannel>>>
export type CreateChannelResult = NonNullable<Awaited<ReturnType<typeof createChannel>>>
export type GetChannelsResult = NonNullable<Awaited<ReturnType<typeof getChannels>>>
export type CreatePodchannelResult = NonNullable<Awaited<ReturnType<typeof createPodchannel>>>
export type GetPodchannelResult = NonNullable<Awaited<ReturnType<typeof getPodchannel>>>
export type CreateRandomUserResult = NonNullable<Awaited<ReturnType<typeof createRandomUser>>>
